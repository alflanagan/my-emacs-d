* Emacs Configuration

This is file config.org: Main emacs configuration.

** File Setup

*Must* be first line of the file.

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

** Load Path

In my local /lisp subdirectory, I've got some third-party projects
which should be loaded from local files.

#+begin_src emacs-lisp
(defun add-subdirs-to-load-path (parent-directory)
  "Add PARENT-DIRECTORY and its immediate child directories to `load-path'."
  (let ((default-directory parent-directory))
    (add-to-list 'load-path default-directory)
    (normal-top-level-add-subdirs-to-load-path)))

;; (add-subdirs-to-load-path "/opt/homebrew/share/emacs/site-lisp")
(add-subdirs-to-load-path
 (directory-file-name
  (concat (expand-file-name user-emacs-directory) "my_emacs/lisp")))
#+end_src

** Customization
Set up seperate file for use by emacs customzation.

I prefer to set customization options in the ~use-package~ declaration
for each package, but on-the-fly or local-only customizations will go
to this file.

#+begin_src emacs-lisp
 (setq custom-file "~/.config/emacs/my_emacs/custom.el")
 (load custom-file)
#+end_src

Set up convenient global settings. Display line numbers by
default. Convert ctrl-l characters to horizontal lines.

#+begin_src emacs-lisp
  (global-page-break-lines-mode)
  (global-display-line-numbers-mode)
#+end_src

** Packages
Eventual goal is to remove from customization entirely, and use
~use-package~ for all.

... except in practice it's easier to add from ~list-packages~ and
thus it sets variable ~package-select-packages~ anyway -- should we
advise ~use-package~ to do that also??

*** Treemacs

Set up treemacs, the directory tree sidebar.

#+begin_src emacs-lisp
(use-package
 treemacs
 :ensure t
 :defer t
 :init
 (with-eval-after-load 'winum
   (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
 :config
 (progn
   (setopt
    treemacs-collapse-dirs
    (if treemacs-python-executable
        3
      0)
    treemacs-display-in-side-window t)
   (treemacs-follow-mode t)
   (treemacs-filewatch-mode t)
   (treemacs-fringe-indicator-mode 'always)
   (when treemacs-python-executable
     (treemacs-git-commit-diff-mode t))

   (pcase (cons
           (not (null (executable-find "git")))
           (not (null treemacs-python-executable)))
     (`(t . t) (treemacs-git-mode 'deferred))
     (`(t . _) (treemacs-git-mode 'simple)))

   (treemacs-hide-gitignored-files-mode nil))
 :bind
 (:map
  global-map
  ("M-0" . treemacs-select-window)
  ("C-x t 1" . treemacs-delete-other-windows)
  ("C-x t t" . treemacs)
  ("C-x t d" . treemacs-select-directory)
  ("C-x t B" . treemacs-bookmark)
  ("C-x t C-t" . treemacs-find-file)
  ("C-x t M-t" . treemacs-find-tag)))
#+end_src

**** Treemacs-icons-dired

Treemacs icons for Dired.  Code is based on all-the-icons-dired.el

#+begin_src emacs-lisp
(use-package treemacs-icons-dired
  :after (treemacs)
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)
#+end_src

**** Treemacs-magit -- integrate git with treemacs.

#+begin_src emacs-lisp
(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)
#+end_src

**** Treemacs start on boot.

Initialiser specifically to start treemacs as part of your init
file. Ensures that all visual elements are present which might
otherwise be missing because their setup requires an interactive
command or a post-command hook.

#+begin_src emacs-lisp
(treemacs-start-on-boot)
#+end_src

** End of File

#+begin_src emacs-lisp
;;; init.el ends here
#+end_src

